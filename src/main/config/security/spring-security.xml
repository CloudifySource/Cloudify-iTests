<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.0.xsd">
	
	<!-- <sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider>
			<sec:user-service>
				<sec:user name="Superuser" password="Superuser" authorities="ROLE_CLOUDADMINS, ROLE_APPMANAGERS, ROLE_VIEWERS" />
				<sec:user name="Amanda" password="Amanda" authorities="ROLE_CLOUDADMINS" />
				<sec:user name="Dana" password="Dana" authorities="ROLE_CLOUDADMINS, ROLE_APPMANAGERS" />
				<sec:user name="Dan" password="Dan" authorities="ROLE_APPMANAGERS" />
				<sec:user name="Don" password="Don" authorities="ROLE_APPMANAGERS, ROLE_VIEWERS" />
				<sec:user name="John" password="John" authorities="ROLE_VIEWERS" />
				<sec:user name="Jane" password="Jane" authorities="" />
			</sec:user-service>
		</sec:authentication-provider>
	</sec:authentication-manager> -->

	<beans profile="nonsecure,default">
		<sec:http auto-config='true' use-expressions="true">
			<sec:intercept-url pattern="/**" access="permitAll" />
			<sec:http-basic />
			<sec:anonymous /> 
		</sec:http>
		
	</beans>
		
	<beans profile="secure_no_ssl">
		<!-- to limit HTTP access to the application -->
		<sec:http entry-point-ref="basicAuthEntryPoint" auto-config="false"
			create-session="never" use-expressions="true">
			<sec:intercept-url pattern="/admin/**" requires-channel="http"
				access="isFullyAuthenticated() and hasAnyRole('ROLE_CLOUDADMINS')" />
			<sec:intercept-url pattern="/service/testrest" requires-channel="http"
				access="permitAll" />
			<sec:intercept-url pattern="/service/testlogin" requires-channel="http"
				access="isFullyAuthenticated()" />
			<sec:intercept-url pattern="/service/**" requires-channel="http"
				access="isFullyAuthenticated() and hasAnyRole('ROLE_CLOUDADMINS', 'ROLE_APPMANAGERS', 'ROLE_VIEWERS')" />
			<sec:intercept-url pattern="/attributes/**" requires-channel="http"
				access="isFullyAuthenticated() and hasAnyRole('ROLE_CLOUDADMINS', 'ROLE_APPMANAGERS')" />
			<sec:intercept-url pattern="/**" requires-channel="http" access="isFullyAuthenticated()" />
			<sec:custom-filter ref="basicAuthenticationFilter"
				after="BASIC_AUTH_FILTER" />
			<sec:logout />
		</sec:http>
		
		<bean id="basicAuthEntryPoint"
			class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
			<property name="realmName" value="REST Realm" />
		</bean>

		<bean id="basicAuthenticationFilter"
			class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
			<property name="authenticationManager" ref="authenticationManager" />
			<property name="authenticationEntryPoint" ref="basicAuthEntryPoint" />
		</bean>

	
		<!-- to connect to a LDAP user-store replace the above authentication-manager 
		with this one, and enter your ldap settings -->
		
		<!--this is the naive configuration for ldap, setting roles based on group membership, so roles names are "ROLE_<GROUP NAME>". -->
		<!--sec:ldap-server url="ldap://localhost:389/dc=maxcrc,dc=com"/>
		<sec:authentication-manager alias="authenticationManager">
			<sec:ldap-authentication-provider user-search-filter="uid={0}" user-search-base="ou=people" group-search-base="ou=groups" group-search-filter="member={0}"/> 
		</sec:authentication-manager-->
	
		<!--this is the advanced configuration for ldap, setting roles based on attributes values, and authorization groups based on group membership. -->
		<!--sec:authentication-manager alias="authenticationManager">
			<sec:authentication-provider ref="ldapAuthProvider"/>
		</sec:authentication-manager>
		
		<bean id="contextSource" class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
			<constructor-arg value="ldap://localhost:389/dc=maxcrc,dc=com"/>
			<property name="userDn" value="cn=manager,dc=maxcrc,dc=com"/>
			<property name="password" value="secret"/>
		</bean>
	 
		<bean id="CustomLdapUserDetailsMapper" class="org.cloudifysource.rest.security.CustomLdapUserDetailsMapper" >
			<property name="roleAttributes">
				<list>
					<value>description</value>
				</list>
			</property>
		</bean>
		
		<bean id="userSearch" class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
			<constructor-arg index="0" value=""/>
			<constructor-arg index="1" value="(uid={0})"/>
			<constructor-arg index="2" ref="contextSource" />
		</bean>
		
		<bean id="ldapAuthProvider" class="org.cloudifysource.rest.security.CustomLdapAuthenticationProvider">
			<constructor-arg>
				<bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
					<constructor-arg ref="contextSource"/>
					<property name="userSearch" ref="userSearch">
					</property>
				</bean>
			</constructor-arg>
			<constructor-arg>
				<bean class="org.cloudifysource.rest.security.CustomLdapAuthoritiesPopulator">
				<constructor-arg name="roleAttributes">
					<list>
						<value>description</value>
					</list>
				</constructor-arg>
				</bean>
			</constructor-arg>
			<constructor-arg>
				<bean class="org.cloudifysource.rest.security.CustomLdapAuthGroupsPopulator">
					<constructor-arg ref="contextSource"/>
					<constructor-arg value="ou=groups"/>
				</bean>
			</constructor-arg>
			<property name="UserDetailsContextMapper" ref="CustomLdapUserDetailsMapper"/>
		</bean-->
			
	</beans>
	
	<beans profile="secure">
		<!-- to limit HTTP access to the application -->
		<sec:http entry-point-ref="basicAuthEntryPoint" auto-config="false"
			create-session="never" use-expressions="true">
			<sec:intercept-url pattern="/admin/**" requires-channel="https"
				access="isFullyAuthenticated() and hasAnyRole('ROLE_CLOUDADMINS')" />
			<sec:intercept-url pattern="/service/testrest" requires-channel="https"
				access="permitAll" />
			<sec:intercept-url pattern="/service/testlogin" requires-channel="https"
				access="isFullyAuthenticated()" />
			<sec:intercept-url pattern="/service/**" requires-channel="https"
				access="isFullyAuthenticated() and hasAnyRole('ROLE_CLOUDADMINS', 'ROLE_APPMANAGERS', 'ROLE_VIEWERS')" />
			<sec:intercept-url pattern="/attributes/**" requires-channel="https"
				access="isFullyAuthenticated() and hasAnyRole('ROLE_CLOUDADMINS', 'ROLE_APPMANAGERS')" />
			<sec:intercept-url pattern="/**" requires-channel="https" access="isFullyAuthenticated()" />
			<sec:custom-filter ref="basicAuthenticationFilter"
				after="BASIC_AUTH_FILTER" />
			<sec:logout />
		</sec:http>
		
		<bean id="basicAuthEntryPoint"
			class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
			<property name="realmName" value="REST Realm" />
		</bean>

		<bean id="basicAuthenticationFilter"
			class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
			<property name="authenticationManager" ref="authenticationManager" />
			<property name="authenticationEntryPoint" ref="basicAuthEntryPoint" />
		</bean>
		
		<!--this is the advanced configuration for ldap, setting roles based on attributes values, and authorization groups based on group membership. -->
		<sec:authentication-manager alias="authenticationManager">
			<sec:authentication-provider ref="ldapAuthProvider"/>
		</sec:authentication-manager>
		
		<bean id="contextSource" class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
			<constructor-arg value="ldap://localhost:389/dc=maxcrc,dc=com"/>
			<property name="userDn" value="cn=manager,dc=maxcrc,dc=com"/>
			<property name="password" value="secret"/>
		</bean>
	 
		<bean id="CustomLdapUserDetailsMapper" class="org.cloudifysource.rest.security.CustomLdapUserDetailsMapper" >
			<property name="roleAttributes">
				<list>
					<value>description</value>
				</list>
			</property>
		</bean>
		
		<bean id="userSearch" class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
			<constructor-arg index="0" value=""/>
			<constructor-arg index="1" value="(uid={0})"/>
			<constructor-arg index="2" ref="contextSource" />
		</bean>
		
		<bean id="ldapAuthProvider" class="org.cloudifysource.rest.security.CustomLdapAuthenticationProvider">
			<constructor-arg>
				<bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
					<constructor-arg ref="contextSource"/>
					<property name="userSearch" ref="userSearch">
					</property>
				</bean>
			</constructor-arg>
			<constructor-arg>
				<bean class="org.cloudifysource.rest.security.CustomLdapAuthoritiesPopulator">
				<constructor-arg name="roleAttributes">
					<list>
						<value>description</value>
					</list>
				</constructor-arg>
				</bean>
			</constructor-arg>
			<constructor-arg>
				<bean class="org.cloudifysource.rest.security.CustomLdapAuthGroupsPopulator">
					<constructor-arg ref="contextSource"/>
					<constructor-arg value="ou=groups"/>
				</bean>
			</constructor-arg>
			<property name="UserDetailsContextMapper" ref="CustomLdapUserDetailsMapper"/>
		</bean>
		
	</beans>

</beans>