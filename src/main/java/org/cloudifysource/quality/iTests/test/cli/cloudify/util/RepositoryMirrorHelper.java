package org.cloudifysource.quality.iTests.test.cli.cloudify.util;

import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Date;

import org.apache.commons.io.FileUtils;
import org.cloudifysource.dsl.utils.ServiceUtils;
import org.testng.Assert;

import iTests.framework.utils.LogUtils;

public class RepositoryMirrorHelper {

	public static final String REPOSITORY_MIRROR_SYSPROP = "org.cloudifysource.repository.mirror";
	public static final String REPOSITORY_DEFAULT = "repository.cloudifysource.org";

	public void revertHostsFile() throws IOException {
		final String mirror = System.getProperty(REPOSITORY_MIRROR_SYSPROP);
		if (mirror == null || mirror.equalsIgnoreCase("dummy")) {
			LogUtils.log("No repository mirror found in system properties. Hosts file will not be reverted.");
			return;
		}

		final RepositoryMirrorHandler handler = createHandler();
		
		
		final File hostsFile = handler.getHostsFile();
		final File backupHostsFile = getBackupHostsFile(hostsFile);

		if(!backupHostsFile.exists()) {
			LogUtils.log("backup file does not exist! Did you create one with modifyHostsFile()");
			return;
		}
		
		
		LogUtils.log("Checking for old hosts file backup");
		handler.revertHostsFile(hostsFile, backupHostsFile, true);
		LogUtils.log("Finished reverting hosts file modification");
	}
	
	public void modifyHostsFile() throws IOException {
		final String mirror = System.getProperty(REPOSITORY_MIRROR_SYSPROP);
		if (mirror == null || mirror.equalsIgnoreCase("dummy")) {
			LogUtils.log("No repository mirror found in system properties. Resource calls to the repository will go directly to: "
					+ REPOSITORY_DEFAULT);
			return;
		}

		String actualMirror = getActualMirrorIP(mirror);

		final RepositoryMirrorHandler handler = createHandler();
		
		final File hostsFile = handler.getHostsFile();
		final File modifiedHostsFile = createModifiedHostsFile(hostsFile, actualMirror);
		final File backupHostsFile = getBackupHostsFile(hostsFile);
		handler.revertHostsFile(hostsFile, backupHostsFile, false);
		//final File backupHostsFile = new File(hostsFile.getAbsolutePath() + ".sgtest.backup");

		handler.modifyHostsFile(hostsFile, modifiedHostsFile, backupHostsFile);
		
		
	}

	private File getBackupHostsFile(final File hostsFile) {
		final String backupHostsFileName = hostsFile.getAbsolutePath() + ".sgtest.backup";
		final File backupHostsFile = new File(backupHostsFileName);
		return backupHostsFile;
	}

	private String getActualMirrorIP(final String mirror) throws UnknownHostException {
		String actualMirror = mirror;
		try {
			InetAddress resolvedMirrorAddress = InetAddress.getByName(mirror);
			LogUtils.log("Successfully resolved mirror address: " + resolvedMirrorAddress);
			actualMirror = resolvedMirrorAddress.getHostAddress();
			LogUtils.log("Resolved mirror address is: " + actualMirror);
		} catch (UnknownHostException e) {
			LogUtils.log("Unable to resolve repository mirror address: " + mirror
					+ ". Error was: "
					+ e.getMessage(), e);
			throw e;
		}
		return actualMirror;
	}

	private RepositoryMirrorHandler createHandler() {
		RepositoryMirrorHandler handler = null;
		if(ServiceUtils.isWindows()) {
			handler = new WindowsRepositoryMirrorHandler();
		} else {
			handler = new LinuxRepositoryMirrorHelper();
		}
		return handler;
	}

	private File createModifiedHostsFile(final File hostsFile, final String actualMirror) throws IOException {

		final String newline = System.getProperty("line.separator");
		// read current hosts file
		final String originalHostsContent = FileUtils.readFileToString(hostsFile);

		// The lines to be added.
		final String hostsModification = newline + newline
				+ "# Generated by SGTest suite on: " + new Date() + " " + newline
				+ actualMirror + "\trepository.cloudifysource.org" + newline;

		final String modifiedHostsContent = originalHostsContent + hostsModification;

		final File modifiedFile = File.createTempFile("modifiedHosts", ".tmp");
		FileUtils.writeStringToFile(modifiedFile, modifiedHostsContent);
		modifiedFile.deleteOnExit();
		
		return modifiedFile;
	}
	
	private File getHostsFile() {
		if (ServiceUtils.isWindows()) {
			return getWindowsHostsFile();
		}  else if(ServiceUtils.isLinuxOrUnix()) {
			return getLinuxHostsFile();
		}
		Assert.fail("Unsupported operating system: " + System.getProperty("os.name"));
		return null;// can't happen
	}

	private File getWindowsHostsFile() {
		// %systemroot%\system32\drivers\etc\
		File hostsFile;
		final String systemRootEnvVar = System.getenv("systemroot");
		Assert.assertNotNull(systemRootEnvVar, "Missing environment variable on windows: systemroot");
		final File systemRoot = new File(systemRootEnvVar);
		Assert.assertTrue(systemRoot.exists(), "System root directory not found");
		final File system32 = new File(systemRoot, "system32");
		Assert.assertTrue(system32.exists(), "system32 directory is missing");
		final File drivers = new File(system32, "drivers");
		Assert.assertTrue(drivers.exists(), "drivers directory is missing");
		final File etc = new File(drivers, "etc");
		Assert.assertTrue(etc.exists(), "etc directory is missing");
		hostsFile = new File(etc, "hosts");
		Assert.assertTrue(hostsFile.exists(), "hosts file is missing");
		return hostsFile;
	}
	
	private File getLinuxHostsFile() {
		final File hostsFile = new File("/etc/hosts");
		Assert.assertTrue(hostsFile.exists(), "hosts file is missing");
		return hostsFile;
	}


	private void handleOldBackupHostsFile(File hostsFile, final File backupHostsFile, final boolean reverting) throws IOException {
		if (backupHostsFile.exists()) {
			if(!reverting) {
				LogUtils.log("Warning - found an old sgtest hosts file backup. This indicates an abnormal termination of a previous suite. hosts file will be reverted to the backup version");
			}
			FileUtils.copyFile(backupHostsFile, hostsFile);
			final boolean deleteResult = FileUtils.deleteQuietly(backupHostsFile);
			if (!deleteResult) {
				throw new IOException("Failed to delete old backup hosts file: " + backupHostsFile);
			}
		}
	}
}
