package org.cloudifysource.quality.iTests.test.cli.cloudify.util;

import iTests.framework.utils.LogUtils;

import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Date;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.cloudifysource.dsl.utils.ServiceUtils;

public class RepositoryMirrorHelper {

	public static final String REPOSITORY_MIRROR_SYSPROP = "org.cloudifysource.repository.mirror";
	public static final String REPOSITORY_DEFAULT = "repository.cloudifysource.org";

	public void revertHostsFile() throws IOException {
//		final String mirror = getMirrorSysProp();
//		if (mirror == null) {
//			return;
//		}

		final RepositoryMirrorHandler handler = createHandler();

		final File hostsFile = handler.getHostsFile();
		final File backupHostsFile = getBackupHostsFile(hostsFile);

		if (!backupHostsFile.exists()) {
			LogUtils.log("No repository mirror hosts backup file found! hosts files will not be modified");
			return;
		}

		LogUtils.log("Revering changes to local hosts file");
		handler.revertHostsFile(hostsFile, backupHostsFile, true);
		LogUtils.log("Finished reverting hosts file modification");
	}

	public void modifyHostsFile() throws IOException {
		revertHostsFile();
		
		final String mirror = getMirrorSysProp();
		if (mirror == null) {
			return;
		}

		final String actualMirror = getActualMirrorIP(mirror);

		final RepositoryMirrorHandler handler = createHandler();

		final File hostsFile = handler.getHostsFile();
		final File modifiedHostsFile = createModifiedHostsFile(hostsFile, actualMirror);
		final File backupHostsFile = getBackupHostsFile(hostsFile);
		handler.revertHostsFile(hostsFile, backupHostsFile, false);
		// final File backupHostsFile = new File(hostsFile.getAbsolutePath() + ".sgtest.backup");

		handler.modifyHostsFile(hostsFile, modifiedHostsFile, backupHostsFile);

	}

	private String getMirrorSysProp() {
		final String mirror = System.getProperty(REPOSITORY_MIRROR_SYSPROP);
		if (StringUtils.isBlank(mirror) || mirror.equalsIgnoreCase("dummy")) {
			LogUtils.log("No repository mirror found in system properties. Hosts file modification will not be performed.");
			return null;
		}
		return mirror;
	}

	private File getBackupHostsFile(final File hostsFile) {
		final String backupHostsFileName = hostsFile.getAbsolutePath() + ".sgtest.backup";
		final File backupHostsFile = new File(backupHostsFileName);
		return backupHostsFile;
	}

	private String getActualMirrorIP(final String mirror) throws UnknownHostException {
		String actualMirror = mirror;
		try {
			final InetAddress resolvedMirrorAddress = InetAddress.getByName(mirror);
			LogUtils.log("Successfully resolved mirror address: " + resolvedMirrorAddress);
			actualMirror = resolvedMirrorAddress.getHostAddress();
			LogUtils.log("Resolved mirror address is: " + actualMirror);
		} catch (final UnknownHostException e) {
			LogUtils.log("Unable to resolve repository mirror address: " + mirror
					+ ". Error was: "
					+ e.getMessage(), e);
			throw new IllegalArgumentException("Unable to resolve repository mirror address: " + mirror
					+ ". Error was: "
					+ e.getMessage(), e);
		}
		return actualMirror;
	}

	private RepositoryMirrorHandler createHandler() {
		RepositoryMirrorHandler handler = null;
		if (ServiceUtils.isWindows()) {
			handler = new WindowsRepositoryMirrorHandler();
		} else {
			handler = new LinuxRepositoryMirrorHelper();
		}
		return handler;
	}

	private File createModifiedHostsFile(final File hostsFile, final String actualMirror) throws IOException {

		final String newline = System.getProperty("line.separator");
		// read current hosts file
		final String originalHostsContent = FileUtils.readFileToString(hostsFile);

		// The lines to be added.
		final String hostsModification = newline + newline
				+ "# Generated by SGTest suite on: " + new Date() + " " + newline
				+ actualMirror + "\trepository.cloudifysource.org" + newline;

		final String modifiedHostsContent = originalHostsContent + hostsModification;

		final File modifiedFile = File.createTempFile("modifiedHosts", ".tmp");
		FileUtils.writeStringToFile(modifiedFile, modifiedHostsContent);
		modifiedFile.deleteOnExit();

		return modifiedFile;
	}

}
