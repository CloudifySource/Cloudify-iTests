package test.esm.old;

import static org.testng.AssertJUnit.assertTrue;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicLong;

import org.openspaces.admin.esm.ElasticServiceManager;
import org.openspaces.admin.gsc.GridServiceContainer;
import org.openspaces.admin.gsc.events.GridServiceContainerLifecycleEventListener;
import org.openspaces.admin.pu.DeploymentStatus;
import org.openspaces.admin.pu.ProcessingUnit;
import org.openspaces.admin.space.Space;
import org.openspaces.admin.vm.VirtualMachine;
import org.openspaces.core.GigaSpace;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import test.AbstractTest;
import test.data.Person;
import test.utils.ThreadBarrier;

public class RunningAVGTest extends AbstractTest{

	private static GigaSpace gigaSpace;
	private final AtomicLong idGenerator = new AtomicLong();
	private static String threshold = "30%";
	private static long testDuration = 1000 * 60 * 5;
	private static int defaultDelay = 15 ;
	private int numOfObjToWrite = 3000;
	
	private ElasticServiceManager elasticServiceManager;
	private ProcessingUnit pu;
	private ThreadBarrier barrier = new ThreadBarrier(2);

	public RunningAVGTest(){
		super();
	}
	
	@BeforeMethod
	public void setup() throws InterruptedException{
		assertTrue(admin.getMachines().waitFor(2));
		assertTrue(admin.getGridServiceAgents().waitFor(2));
		System.out.println("Locating ESM...");
        elasticServiceManager = admin.getElasticServiceManagers().waitForAtLeastOne();
        System.out.println("Found ESM, deploying...");
        
        pu = elasticServiceManager.deploy(
        		new ElasticDataGridDeployment("mygrid")
		        .capacity("512m", "4g")        
		        .initialJavaHeapSize("512m")
		        .maximumJavaHeapSize("1g")
		        .addSla(new MemorySla(threshold))
		);
        System.out.println("PU deployed: " + pu.getName() + " " + pu.getNumberOfInstances()+","+pu.getNumberOfBackups());
        pu.waitForSpace();
        while(!pu.getStatus().equals(DeploymentStatus.INTACT)) {
            Thread.sleep(1000);
        }
        Space[] spaces= admin.getSpaces().getSpaces();
        gigaSpace = spaces[0].getGigaSpace();
	}
	
	
	//@Test(timeOut = DEFAULT_TEST_TIMEOUT , groups="2")
	public void test(){
		 
		final ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1);
		
		ScheduledExecutorService executorService2 = Executors.newScheduledThreadPool(1);
        final ScheduledFuture<?> sf = executorService.scheduleAtFixedRate(new FeedAndTakeTask(), defaultDelay, 1, TimeUnit.SECONDS);
        
        executorService2.schedule(new ListenerTask(barrier), 60, TimeUnit.SECONDS);
        
		try {
	        barrier.await(testDuration, TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (BrokenBarrierException e) {
			Assert.fail(e.getCause().getMessage());
		} catch (TimeoutException e) {
			sf.cancel(true);
		}
		
        
	}	
	
	public class ListenerTask implements Runnable{

		private ThreadBarrier barrier;
		
		public ListenerTask(ThreadBarrier tb){
			this.barrier=tb;
		}
		
		public void run() {
			System.out.println("******** listener added *******");
			admin.addEventListener(new GridServiceContainerLifecycleEventListener() {
				
				public void gridServiceContainerAdded(
						GridServiceContainer gridServiceContainer) {
					System.out.println("***************gsc added*************");
					if (admin.getGridServiceContainers().getContainers().length <= 2){
						return;
					}
					try {
						Assert.fail("unexpected gsc added");
					} catch (Error e) {
						barrier.reset(new Throwable(e.getMessage()));
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

				public void gridServiceContainerRemoved(
						GridServiceContainer gridServiceContainer) {
				}
			});
			
		}
		
	}
	
	public class FeedAndTakeTask implements Runnable{

		public void run() {
			boolean shouldWrite = true;
			for(VirtualMachine vm : admin.getVirtualMachines()){
				double heapMem = vm.getStatistics().getMemoryHeapUsedPerc();
				double dThreshold = Double.parseDouble(threshold.substring(0, threshold.length()-1));
				if (heapMem >=  dThreshold){
					vm.runGc();
					shouldWrite = false;
				}
			}
			if (shouldWrite){
				List<Person> batch=new ArrayList<Person>();
				for(int i=0; i< numOfObjToWrite; i++){
					Person p=new Person();
					long id=idGenerator.getAndIncrement();
					p.setId(id);
					p.setName("p"+id);
					batch.add(p);
				}
				System.out.println("Wrote "+gigaSpace.writeMultiple(batch.toArray()).length+" Objects to space");
				System.out.println("Took "+gigaSpace.takeMultiple(new Person(),batch.toArray().length/2).length+" Objects from space");
			}
			else{
				Person p=new Person();				
				int objCount;
				while ((objCount = gigaSpace.takeMultiple(p, 100).length) > 0){
					System.out.println("Took "+objCount+" Objects from space");
				}				
			}
			
		}
		
	}
}
